# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main
- prod
- uat

pool:
  vmImage: 'ubuntu-latest'

variables:
  ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
    buildConfiguration: development
  ${{ if eq(variables['Build.SourceBranchName'], 'uat') }}:
    buildConfiguration: uat
  ${{ if eq(variables['Build.SourceBranchName'], 'prod') }}:
    buildConfiguration: production

steps:
- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'NSI-Sonar-Echo'
    organization: 'nsi-1'
    scannerMode: 'MSBuild'
    projectKey: 'NSI_NSI.Service.Echo'
    projectName: 'NSI.Service.Echo'
    extraProperties: |
      sonar.exclusions=**/*.bin,NSI.REST/appsettings.json
      sonar.cs.vscoveragexml.reportsPaths=$(Agent.BuildDirectory)\TestResults\TestCoverage.xml

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Execute Tests'
  inputs:
    command: test
    projects: '**/NSI.Tests/*.csproj'
    arguments: '--configuration $(BuildConfiguration)'
    testRunTitle: 'Tests for $(Build.BuildNumber)'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Get-ChildItem -Path $(Agent.TempDirectory) -Filter *.trx -Recurse -ErrorAction SilentlyContinue`
      | %{Join-Path -Path $_.Directory -ChildPath $_.Name }`
      | Copy-Item -Destination $(Agent.BuildDirectory)\TestResults\TestResults.trx
       
      Get-ChildItem -Path $(Agent.TempDirectory) -Filter *.coverage -Recurse -ErrorAction SilentlyContinue `
      |%{Join-Path -Path $_.Directory -ChildPath $_.Name }`
      | Copy-Item -Destination $(Agent.BuildDirectory)\TestResults\TestCoverage.coverage 

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $tool= Get-ChildItem -Path '$(Agent.TempDirectory)\VsTest\*\tools\net451\Team Tools\Dynamic Code Coverage Tools\amd64\'`
       -Filter CodeCoverage.exe -Recurse -ErrorAction SilentlyContinue
       
      $parameter1 =  'analyze'
      $parameter2 = '/output:$(Agent.BuildDirectory)\TestResults\TestCoverage.xml'
      $parameter3 = '$(Agent.BuildDirectory)\TestResults\TestCoverage.coverage'
      $parameters= "$parameter1 $parameter2 $parameter3"
      Write-Output $tool
       
      Write-Host "Executing $tool $parameters"
      $parms = $parameters.Split(" ")
      & "$tool" $parms

- task: SonarCloudAnalyze@1

- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '60'

- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    publishLocation: 'pipeline'

#- script: dotnet build --configuration $(buildConfiguration)
#  displayName: 'dotnet build $(buildConfiguration)'
#
#- task: UseDotNet@2
#  displayName: 'Install .NET Core SDK'
#  inputs:
#    version: 5.x
#    performMultiLevelLookup: True